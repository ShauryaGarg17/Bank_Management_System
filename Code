#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
using namespace std;

class Account {
private:
    string name;
    int accountNumber;
    float balance;
    float loanAmount;
    bool creditCardEligible;

public:
    Account(string name, int accountNumber, float balance) : name(name), accountNumber(accountNumber), balance(balance), loanAmount(0.0), creditCardEligible(balance >= 10000) {}
    string getName() const {
        return name;
    }
    int getAccountNumber() const {
        return accountNumber;
    }
    float getBalance() const {
        return balance;
    }
    float getLoanAmount() const {
        return loanAmount;
    }
    bool isCreditCardEligible() const {
        return creditCardEligible;
    }
    void deposit(float amount) {
        balance += amount;
        if (balance >= 10000) {
            creditCardEligible = true;
        }
    }
    void withdraw(float amount) {
        if (balance >= amount) {
            balance -= amount;
            cout << "Withdrawal successful!" << endl;
            cout << "Remaining balance: " << balance << endl;
        } else {
            cout << "Insufficient balance!" << endl;
        }
    }
    void takeLoan(float amount) {
        loanAmount += amount;
        balance += amount;
        cout << "Loan of " << amount << " taken successfully!" << endl;
        cout << "Remaining balance: " << balance << endl;
    }
};

class Bank {
private:
    vector<Account> accounts;
    bool loggedIn;
    int currentAccountNumber;

public:
    Bank() : loggedIn(false), currentAccountNumber(-1) {}

    void transferMoney(int senderAccountNumber, int receiverAccountNumber, float amount) {
        int senderIndex = findAccountIndex(senderAccountNumber);
        int receiverIndex = findAccountIndex(receiverAccountNumber);

        if (senderIndex == -1 || receiverIndex == -1) {
            cout << "Invalid account number(s)!" << endl;
        } else if (accounts[senderIndex].getBalance() < amount) {
            cout << "Insufficient balance!" << endl;
        } else {
            accounts[senderIndex].withdraw(amount);
            accounts[receiverIndex].deposit(amount);
            cout << "Transfer successful!" << endl;
        }
    }
    void createAccount(string name, int accountNumber, float balance) {
        Account newAccount(name, accountNumber, balance);
        accounts.push_back(newAccount);
        cout << "Account created successfully!" << endl;
    }
    void checkAmount(int accountNumber) {
        int index = findAccountIndex(accountNumber);
        if (index != -1) {
            cout << "Balance: " << accounts[index].getBalance() << endl;
            cout << "Pending Loan Amount: " << accounts[index].getLoanAmount() << endl;
        } else {
            cout << "Account not found!" << endl;
        }
    }
    int findAccountIndex(int accountNumber) {
        for (int i = 0; i < accounts.size(); i++) {
            if (accounts[i].getAccountNumber() == accountNumber) {
                return i;
            }
        }
        return -1;
    }
    bool login(string name, int accountNumber) {
        for (int i = 0; i < accounts.size(); i++) {
            if (accounts[i].getName() == name && accounts[i].getAccountNumber() == accountNumber) {
                loggedIn = true;
                currentAccountNumber = accountNumber;
                cout << "Login successful!" << endl;
                cout << "Account Balance: " << accounts[i].getBalance() << endl;
                cout << "Pending Loan Amount: " << accounts[i].getLoanAmount() << endl;
                return true;
            }
        }
        return false;
    }
    void logout() {
        loggedIn = false;
        currentAccountNumber = -1;
        cout << "Logout successful!" << endl;
    }
    bool isLoggedIn() const {
        return loggedIn;
    }
    int getCurrentAccountNumber() const {
        return currentAccountNumber;
    }

    void withdrawAmount(int accountNumber, float amount) {
        int index = findAccountIndex(accountNumber);
        if (index != -1) {
            accounts[index].withdraw(amount);
        } else {
            cout << "Account not found!" << endl;
        }
    }
    void displayLoanSchemes() {
        cout << "\nAvailable Loan Schemes:\n";
        cout << "1. Personal Loan - 10% interest\n";
        cout << "2. Home Loan - 8% interest\n";
        cout << "3. Car Loan - 7% interest\n";
    }
    void takeLoan(int accountNumber, int choice, float amount) {
        if (isLoggedIn()) {
            int index = findAccountIndex(accountNumber);
            if (index != -1) {
                float interestRate = 0.0;
                switch (choice) {
                case 1:
                    interestRate = 0.10;
                    break;
                case 2:
                    interestRate = 0.08;
                    break;
                case 3:
                    interestRate = 0.07;
                    break;
                default:
                    cout << "Invalid choice!" << endl;
                    return;
                }
                float interest = amount * interestRate;
                float totalAmount = amount + interest;
                accounts[index].takeLoan(totalAmount);
            } else {
                cout << "Account not found!" << endl;
            }
        } else {
            cout << "Please login first to take a loan!" << endl;
        }
    }

    void issueCreditCard(int accountNumber) {
        int index = findAccountIndex(accountNumber);
        if (index != -1) {
            if (accounts[index].isCreditCardEligible()) {
                cout << "Congratulations! You are eligible for a credit card." << endl;
                cout << "Choose from the following options:" << endl;
                cout << "1. Silver Credit Card" << endl;
                cout << "2. Gold Credit Card" << endl;
                cout << "3. Platinum Credit Card" << endl;
                int choice;
                cout << "Enter your choice: ";
                cin >> choice;
                switch (choice) {
                case 1:
                    cout << "Silver Credit Card issued successfully!" << endl;
                    break;
                case 2:
                    cout << "Gold Credit Card issued successfully!" << endl;
                    break;
                case 3:
                    cout << "Platinum Credit Card issued successfully!" << endl;
                    break;
                default:
                    cout << "Invalid choice!" << endl;
                    break;
                }
            } else {
                cout << "You are not eligible for a credit card. Minimum balance required: 10000" << endl;
            }
        } else {
            cout << "Account not found!" << endl;
        }
    }
};

int main() {
    Bank bank;
    int choice;
    do {
        cout << "\nBank Management System\n";
        if (!bank.isLoggedIn()) {
            cout << "1. Login\n";
        } else {
            cout << "1. Logout\n";
        }
        cout << "2. Transfer Money\n";
        cout << "3. Create Account\n";
        cout << "4. Check Amount\n";
        cout << "5. Withdraw Cash\n";
        cout << "6. Loan\n";
        cout << "7. Issue Credit Card\n";
        cout << "8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1: {
            if (!bank.isLoggedIn()) {
                string name;
                int accountNumber;
                cout << "Enter name: ";
                cin >> name;
                cout << "Enter account number: ";
                cin >> accountNumber;
                if (bank.login(name, accountNumber)) {}
                else {
                    cout << "Login failed!" << endl;
                }
            } else {
                bank.logout();
            }
            break;
        }
        case 2: {
            int senderAccountNumber, receiverAccountNumber;
            float amount;
            cout << "Enter sender's account number: ";
            cin >> senderAccountNumber;
            cout << "Enter receiver's account number: ";
            cin >> receiverAccountNumber;
            cout << "Enter amount to transfer: ";
            cin >> amount;
            bank.transferMoney(senderAccountNumber, receiverAccountNumber, amount);
            break;
        }
        case 3: {
            string name;
            int accountNumber;
            float balance;
            cout << "Enter name: ";
            cin >> name;
            cout << "Enter account number: ";
            cin >> accountNumber;
            cout << "Enter balance: ";
            cin >> balance;
            bank.createAccount(name, accountNumber, balance);
            break;
        }
        case 4: {
            int accountNumber;
            cout << "Enter account number: ";
            cin >> accountNumber;
            bank.checkAmount(accountNumber);
            break;
        }
        case 5: {
            int accountNumber;
            float amount;
            cout << "Enter account number: ";
            cin >> accountNumber;
            cout << "Enter amount to withdraw: ";
            cin >> amount;
            bank.withdrawAmount(accountNumber, amount);
            break;
        }
        case 6: {
            if (bank.isLoggedIn()) {
                int accountNumber, loanChoice;
                float amount;
                cout << "Enter account number: ";
                cin >> accountNumber;
                bank.displayLoanSchemes();
                cout << "Choose a loan scheme (1/2/3): ";
                cin >> loanChoice;
                cout << "Enter loan amount: ";
                cin >> amount;
                bank.takeLoan(accountNumber, loanChoice, amount);
            } else {
                cout << "Please login first!" << endl;
            }
            break;
        }
        case 7: {
            int accountNumber;
            cout << "Enter account number: ";
            cin >> accountNumber;
            bank.issueCreditCard(accountNumber);
            break;
        }
        case 8:
            cout << "Exiting..." << endl;
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 8);

    return 0;
}


